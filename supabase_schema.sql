-- Create Users table for storing user profile information
CREATE TABLE IF NOT EXISTS "Users" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at DATE NOT NULL,
  email TEXT NULL,
  password TEXT NULL,
  full_name TEXT NULL,
  CONSTRAINT Users_pkey PRIMARY KEY (id),
  CONSTRAINT Users_username_key UNIQUE (email)
) TABLESPACE pg_default;

-- Enable Row Level Security
ALTER TABLE "Users" ENABLE ROW LEVEL SECURITY;

-- Policy to allow users to insert their own data (for signup)
CREATE POLICY "Users can insert their own data" ON "Users"
  FOR INSERT WITH CHECK (true);

-- Policy to allow users to view their own data
CREATE POLICY "Users can view their own data" ON "Users"
  FOR SELECT USING (true);

-- Policy to allow users to update their own data
CREATE POLICY "Users can update their own data" ON "Users"
  FOR UPDATE USING (true);

-- Policy to allow users to delete their own data
CREATE POLICY "Users can delete their own data" ON "Users"
  FOR DELETE USING (true);

-- Create Activities table for storing user activity
CREATE TABLE IF NOT EXISTS "Activities" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_id BIGINT NOT NULL,
  activity_type TEXT NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  status TEXT DEFAULT 'active',
  metadata JSONB,
  CONSTRAINT Activities_pkey PRIMARY KEY (id),
  CONSTRAINT Activities_user_id_fkey FOREIGN KEY (user_id) REFERENCES "Users"(id) ON DELETE CASCADE
);

-- Enable Row Level Security on Activities
ALTER TABLE "Activities" ENABLE ROW LEVEL SECURITY;

-- Policy to allow users to insert their own activities
CREATE POLICY "Users can insert their own activities" ON "Activities"
  FOR INSERT WITH CHECK (true);

-- Policy to allow users to view their own activities
CREATE POLICY "Users can view their own activities" ON "Activities"
  FOR SELECT USING (true);

-- Policy to allow users to update their own activities
CREATE POLICY "Users can update their own activities" ON "Activities"
  FOR UPDATE USING (true);

-- Policy to allow users to delete their own activities
CREATE POLICY "Users can delete their own activities" ON "Activities"
  FOR DELETE USING (true);

-- Create trigger to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add updated_at column to Users table if it doesn't exist
ALTER TABLE "Users" ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Create trigger for Users table
DROP TRIGGER IF EXISTS update_users_updated_at ON "Users";
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON "Users"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Create History Logs table for storing scan results
CREATE TABLE IF NOT EXISTS "History Logs" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  email TEXT NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  bag_id TEXT NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('healthy', 'contaminated')),
  confidence INTEGER NOT NULL CHECK (confidence >= 0 AND confidence <= 100),
  contamination_type TEXT,
  image_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT "History Logs_pkey" PRIMARY KEY (id)
);

-- Enable Row Level Security on History Logs
ALTER TABLE "History Logs" ENABLE ROW LEVEL SECURITY;

-- Policy to allow users to insert their own history logs
CREATE POLICY "Users can insert their own history logs" ON "History Logs"
  FOR INSERT WITH CHECK (true);

-- Policy to allow users to view their own history logs
CREATE POLICY "Users can view their own history logs" ON "History Logs"
  FOR SELECT USING (true);

-- Policy to allow users to update their own history logs
CREATE POLICY "Users can update their own history logs" ON "History Logs"
  FOR UPDATE USING (true);

-- Policy to allow users to delete their own history logs
CREATE POLICY "Users can delete their own history logs" ON "History Logs"
  FOR DELETE USING (true);